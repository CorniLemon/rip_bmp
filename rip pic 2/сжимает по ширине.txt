#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <conio.h>
using namespace std;

#include <cstdlib>
#include <cstdio>
#include <Windows.h>

typedef unsigned __int16 WORD;//2 байта
//typedef unsigned int DWORD;//4 байта
typedef long LONG;//4 байта
typedef unsigned char BYTE;//1 байт

//struct BITMAPFILEHEADER {
//    WORD  bfType;
//    DWORD bfSize;
//    WORD  bfReserved1;
//    WORD  bfReserved2;
//    DWORD bfOffBits;
//};

//struct BITMAPINFOHEADER {
//    DWORD biSize;
//    LONG  biWidth;
//    LONG  biHeight;
//    WORD  biPlanes;
//    WORD  biBitCount;
//    DWORD biCompression;
//    DWORD biSizeImage;
//    LONG  biXPelsPerMeter;
//    LONG  biYPelsPerMeter;
//    DWORD biClrUsed;
//    DWORD biClrImportant;
//};

//struct RGBTRIPLE {
//    BYTE rgbtBlue;
//    BYTE rgbtGreen;
//    BYTE rgbtRed;
//};

int main() {
	setlocale(LC_ALL, "Russian");

    BITMAPFILEHEADER bfh;
    BITMAPINFOHEADER bih;
    RGBTRIPLE rgb;

    FILE* f1, * f2;

    remove("pic2.bmp");
    f1 = fopen("pic1.bmp", "r+b");
    f2 = fopen("pic2.bmp", "w+b");

    fread(&bfh, sizeof(bfh), 1, f1);
    fread(&bih, sizeof(bih), 1, f1);

    bih.biWidth /= 2;
    bih.biSizeImage /= 2;
    bfh.bfSize -= bih.biSizeImage;

    fwrite(&bfh, sizeof(bfh), 1, f2);
    fwrite(&bih, sizeof(bih), 1, f2);

    for (int i = 0; i < bih.biSizeImage; i++) {
        fread(&rgb, sizeof(rgb), 1, f1);
        if (i % 2 == 0) {
            fwrite(&rgb, sizeof(rgb), 1, f2);
        }
    }

    fclose(f1);
    fclose(f2);

	return 0;
}